---
# This workflow will create GitHub Releases (& git tags).
# It's a workflow that is manually triggered where you select how you would
# like to increment from an existing semantic tag. The workflow consists of
# three distinct jobs (that currently run sequentially):
#
# 1. check - Determines if the requested tag is permitted.
#    This job surfaces three types of information to make a decision: a) the
#    previous tag and its type (i.e., release or pre-release), b) the requested
#    tag and its type, and c) the number of commits between tags.
#
#    This information is used to determine if a requested tag is permitted. The
#    logic is pretty straightforward -- if there are commits; then the tag is
#    permitted.  When there are no commits; then the tag is only permitted when
#    the previous tag was a pre-release and the requested tag is a release.
#
#    The intent of this logic is to only create tags (& releases) when it
#    makes sense. In short, we don't need to create tags when there are no
#    commits.
#
# 2. tag - Performs a git tag.
#    This job closely resembles our first iteration of a tag workflow. It's a
#    conditional job that creates the actual git tag. After tagging, it will
#    verify that the actual tag matches the expected tag...as a sanity check.
#
# 3. release - Updates the changelog and subsequently creates a GitHub Release.
#    When there are commits associated with the new tag, this job will update a
#    changelog and refesh the newly minted git tag.  Additionally, this job
#    will create a GitHub Release. Note: there is in fact is a difference
#    between git tags and GitHub Releases.

name: cdw-tag

on:
  workflow_dispatch:
    inputs:
      incr:
        type: choice
        description: Semantic version increment
        default: prepatch
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease

jobs:
  check:
    if: github.repository_owner == 'cdwlabs' && github.event.ref == 'refs/heads/main'

    runs-on:
      group: managed-services-apps-team
      labels:
        - self-hosted
        - unit-test
        - Linux
        - X64
        - cdw
        - ubuntu
        - 22.04

    outputs:
      new_tag: ${{ steps.next-tag-id.outputs.next_tag }}
      new_tag_type: ${{ steps.next-tag-id.outputs.next_tag_type }}
      previous_tag: ${{ steps.previous-tag-id.outputs.previous_tag }}
      previous_tag-type: ${{ steps.previous-tag-id.outputs.previous_tag_type }}
      tag_allowed: ${{ steps.tag-tests.outputs.tagging_allowed }}
      commit_count: ${{ steps.tag-tests.outputs.commit_count }}

    steps:
      - name: Prepare credential information
        id: emit-token
        run: |
          echo "::add-mask::$GH_PAT"
          echo "cdw_pat=$GH_PAT" >> $GITHUB_OUTPUT

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.emit-token.outputs.cdw_pat }}
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Clone cdwlabs/managed-actions in a sub-directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.emit-token.outputs.cdw_pat }}
          repository: cdwlabs/managed-actions
          persist-credentials: false
          ref: main
          path: ./.github/actions/cdwlabs-managed-actions

      - name: Use action from cdwlabs-managed-actions
        uses: ./.github/actions/cdwlabs-managed-actions/setup-go-semver

      - name: Determine new tag
        id: next-tag-id
        env:
          SEMVER_INCR_TYPE: ${{ github.event.inputs.incr }}
        run: |
          git fetch --tags
          next_tag=$(semver -r -i="$SEMVER_INCR_TYPE" --preid=rc -d=0.0.0)
          next_tag_type=$([[ "$SEMVER_INCR_TYPE" == pre* ]] && echo "pre-release" || echo "release")
          echo "next tag: ${next_tag}"
          echo "next_tag=${next_tag}" >> "$GITHUB_OUTPUT"
          echo "next tag type: ${next_tag_type}"
          echo "next_tag_type=${next_tag_type}" >> "$GITHUB_OUTPUT"

      - name: Get previous tag
        id: previous-tag-id
        run: |
          # if there's a previous tag; then grab it; otherwise use 'origin'
          prev_tag=$(semver -r -l)
          if [ "$(semver -r -l | wc -l)" -eq 0 ]; then
            prev_tag="origin"
          fi
          # if hyphen found in version; then it's a pre-release; otherwise it's a regular release
          prev_tag_type="pre-release"
          prev_tag_wc=$(echo "${prev_tag}" | awk -F- '{ print $2 }' | tr -d '\n' | wc -c)
          if [ "$prev_tag_wc" -eq 0 ]; then
            prev_tag_type="release"
          fi
          echo "previous tag: ${prev_tag}"
          echo "previous_tag=${prev_tag}" >> "$GITHUB_OUTPUT"
          echo "previous tag type: ${prev_tag_type}"
          echo "previous_tag_type=${prev_tag_type}" >> "$GITHUB_OUTPUT"

      - name: Determine if tagging is permitted
        id: tag-tests
        env:
          NEXT_TAG: ${{ steps.next-tag-id.outputs.next_tag }}
          NEXT_TAG_TYPE: ${{ steps.next-tag-id.outputs.next_tag_type }}
          PREV_TAG: ${{ steps.previous-tag-id.outputs.previous_tag }}
          PREV_TAG_TYPE: ${{ steps.previous-tag-id.outputs.previous_tag_type }}
        run: |
          ccnt=$(git rev-list --count "$PREV_TAG"..HEAD)
          echo "# of commits since last tag: ${ccnt}"
          echo "commit_count=${ccnt}" >> "$GITHUB_OUTPUT"

          tagging_allowed="yes"
          if [ "$ccnt" -eq 0 ]; then
            tagging_allowed="no"
            if [[ "$PREV_TAG_TYPE" == "pre-release" && "$NEXT_TAG_TYPE" == "release" ]]; then
              tagging_allowed="yes"
            fi
          fi
          echo "should we actually tag: ${tagging_allowed}"
          echo "tagging_allowed=${tagging_allowed}" >> "$GITHUB_OUTPUT"


  tag:
    needs: check
    if: needs.check.outputs.tag_allowed == 'yes'

    runs-on:
      group: managed-services-apps-team
      labels:
        - self-hosted
        - unit-test
        - Linux
        - X64
        - ubuntu
        - cdw
        - 22.04

    outputs:
      status: ${{ steps.verified-tag-id.outputs.status }}
      current_tag: ${{ steps.verified-tag-id.outputs.current_tag }}
      current_tag_type: ${{ needs.check.outputs.new_tag_type }}
      previous_tag: ${{ needs.check.outputs.previous_tag }}
      commit_count: ${{ needs.check.outputs.commit_count }}

    steps:
      - name: Prepare credential information
        id: emit-token
        run: |
          echo "::add-mask::$GH_PAT"
          echo "cdw_pat=$GH_PAT" >> $GITHUB_OUTPUT

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.emit-token.outputs.cdw_pat }}
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Clone cdwlabs/managed-actions in a sub-directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.emit-token.outputs.cdw_pat }}
          repository: cdwlabs/managed-actions
          persist-credentials: false
          ref: main
          path: ./.github/actions/cdwlabs-managed-actions

      - name: Use action from cdwlabs-managed-actions
        uses: ./.github/actions/cdwlabs-managed-actions/setup-go-semver

      - name: Install devbox and project's devbox packages
        id: install-dependencies
        run: |
          ./scripts/install-devbox.sh
          eval "$(devbox shellenv --install --init-hook)"  # install devbox packages & execute init hooks
          echo "$DEVBOX_PACKAGES_DIR/bin" >> "$GITHUB_PATH"  # add devbox's path to PATH

      - name: Git configuration
        id: git-config
        run: |
          git fetch --tags
          git config --global user.name "GitHub Actions (run by ${{ github.actor }})"
          git config --global user.email "actions-release[bot]@users.noreply.github.com"          

      - name: Tag
        run: |
          git tag -f -a -m "GitHub Actions release" ${{ needs.check.outputs.new_tag }}
          git push --tags origin main ${{ needs.check.outputs.new_tag }}

      - name: Verify last tag created
        id: verified-tag-id
        env:
          EXPECTED_TAG: ${{ needs.check.outputs.new_tag }}
        run: |
          curr_tag=$(semver -r -l)
          echo "current tag: ${curr_tag}"
          echo "current_tag=${curr_tag}" >> "$GITHUB_OUTPUT"
          if [ "$EXPECTED_TAG" == "$curr_tag" ]; then
            echo "current tag matches expected tag"
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "current tag '$curr_tag' != expected tag '$EXPECTED_TAG'"
            echo "status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi


  release:
    needs: tag
    if: needs.tag.outputs.status == 'success'

    runs-on:
      group: managed-services-apps-team
      labels:
        - self-hosted
        - unit-test
        - Linux
        - X64
        - cdw
        - ubuntu
        - 22.04

    steps:
      - name: Prepare credential information
        id: emit-token
        run: |
          echo "::add-mask::$GH_PAT"
          echo "cdw_pat=$GH_PAT" >> $GITHUB_OUTPUT

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.emit-token.outputs.cdw_pat }}
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true
          ref: refs/heads/main

      - name: Install devbox and project's devbox packages
        id: install-dependencies
        run: |
          ./scripts/install-devbox.sh
          eval "$(devbox shellenv --install --init-hook)"  # install devbox packages & execute init hooks
          echo "$DEVBOX_PACKAGES_DIR/bin" >> "$GITHUB_PATH"  # add devbox's path to PATH

      - name: Git configuration
        id: git-config
        run: |
          git fetch --tags
          git config --global user.name "GitHub Actions (run by ${{ github.actor }})"
          git config --global user.email "actions-release[bot]@users.noreply.github.com"          

      - name: Create pre-Release without changelog
        if: ${{ needs.tag.outputs.commit_count > 0 && needs.tag.outputs.current_tag_type == 'pre-release' }}
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true # for now, pre-releases are considered 'latest' - until we get more experience w/policy
          prerelease: false # for now, pre-releases are not marked as 'pre-release' - until we get more experience w/policy
          artifactContentType: "application/json"
          name: ${{ needs.tag.outputs.current_tag }}
          tag: ${{ needs.tag.outputs.current_tag }}
          token: ${{ steps.emit-token.outputs.cdw_pat }}

      - name: Create standard Release without changelog
        if: ${{ needs.tag.outputs.current_tag_type == 'release' }}
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          prerelease: false
          artifactContentType: "application/json"
          name: ${{ needs.tag.outputs.current_tag }}
          tag: ${{ needs.tag.outputs.current_tag }}
          token: ${{ steps.emit-token.outputs.cdw_pat }}
